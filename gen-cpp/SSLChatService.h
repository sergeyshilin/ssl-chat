/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SSLChatService_H
#define SSLChatService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "sslchat_types.h"

namespace sslchat {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SSLChatServiceIf {
 public:
  virtual ~SSLChatServiceIf() {}

  /**
   * Send to all clients that user @name joins the chat.
   * Send user @name that he was successfully joined.
   * 
   * @param name
   */
  virtual void sendGreating(const std::string& name) = 0;

  /**
   * Out message to client
   * 
   * @param name
   */
  virtual void getMessage(Message& _return, const std::string& name) = 0;

  /**
   * Check if name is in map
   * 
   * @param name
   */
  virtual bool authorize(const std::string& name) = 0;

  /**
   * Send message to all clients without message.getClient()
   * 
   * @param msg
   */
  virtual void send(const Message& msg) = 0;
};

class SSLChatServiceIfFactory {
 public:
  typedef SSLChatServiceIf Handler;

  virtual ~SSLChatServiceIfFactory() {}

  virtual SSLChatServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SSLChatServiceIf* /* handler */) = 0;
};

class SSLChatServiceIfSingletonFactory : virtual public SSLChatServiceIfFactory {
 public:
  SSLChatServiceIfSingletonFactory(const boost::shared_ptr<SSLChatServiceIf>& iface) : iface_(iface) {}
  virtual ~SSLChatServiceIfSingletonFactory() {}

  virtual SSLChatServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SSLChatServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SSLChatServiceIf> iface_;
};

class SSLChatServiceNull : virtual public SSLChatServiceIf {
 public:
  virtual ~SSLChatServiceNull() {}
  void sendGreating(const std::string& /* name */) {
    return;
  }
  void getMessage(Message& /* _return */, const std::string& /* name */) {
    return;
  }
  bool authorize(const std::string& /* name */) {
    bool _return = false;
    return _return;
  }
  void send(const Message& /* msg */) {
    return;
  }
};

typedef struct _SSLChatService_sendGreating_args__isset {
  _SSLChatService_sendGreating_args__isset() : name(false) {}
  bool name :1;
} _SSLChatService_sendGreating_args__isset;

class SSLChatService_sendGreating_args {
 public:

  SSLChatService_sendGreating_args(const SSLChatService_sendGreating_args&);
  SSLChatService_sendGreating_args& operator=(const SSLChatService_sendGreating_args&);
  SSLChatService_sendGreating_args() : name() {
  }

  virtual ~SSLChatService_sendGreating_args() throw();
  std::string name;

  _SSLChatService_sendGreating_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const SSLChatService_sendGreating_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const SSLChatService_sendGreating_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSLChatService_sendGreating_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_sendGreating_args& obj);

};


class SSLChatService_sendGreating_pargs {
 public:


  virtual ~SSLChatService_sendGreating_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_sendGreating_pargs& obj);

};


class SSLChatService_sendGreating_result {
 public:

  SSLChatService_sendGreating_result(const SSLChatService_sendGreating_result&);
  SSLChatService_sendGreating_result& operator=(const SSLChatService_sendGreating_result&);
  SSLChatService_sendGreating_result() {
  }

  virtual ~SSLChatService_sendGreating_result() throw();

  bool operator == (const SSLChatService_sendGreating_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SSLChatService_sendGreating_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSLChatService_sendGreating_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_sendGreating_result& obj);

};


class SSLChatService_sendGreating_presult {
 public:


  virtual ~SSLChatService_sendGreating_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_sendGreating_presult& obj);

};

typedef struct _SSLChatService_getMessage_args__isset {
  _SSLChatService_getMessage_args__isset() : name(false) {}
  bool name :1;
} _SSLChatService_getMessage_args__isset;

class SSLChatService_getMessage_args {
 public:

  SSLChatService_getMessage_args(const SSLChatService_getMessage_args&);
  SSLChatService_getMessage_args& operator=(const SSLChatService_getMessage_args&);
  SSLChatService_getMessage_args() : name() {
  }

  virtual ~SSLChatService_getMessage_args() throw();
  std::string name;

  _SSLChatService_getMessage_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const SSLChatService_getMessage_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const SSLChatService_getMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSLChatService_getMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_getMessage_args& obj);

};


class SSLChatService_getMessage_pargs {
 public:


  virtual ~SSLChatService_getMessage_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_getMessage_pargs& obj);

};

typedef struct _SSLChatService_getMessage_result__isset {
  _SSLChatService_getMessage_result__isset() : success(false) {}
  bool success :1;
} _SSLChatService_getMessage_result__isset;

class SSLChatService_getMessage_result {
 public:

  SSLChatService_getMessage_result(const SSLChatService_getMessage_result&);
  SSLChatService_getMessage_result& operator=(const SSLChatService_getMessage_result&);
  SSLChatService_getMessage_result() {
  }

  virtual ~SSLChatService_getMessage_result() throw();
  Message success;

  _SSLChatService_getMessage_result__isset __isset;

  void __set_success(const Message& val);

  bool operator == (const SSLChatService_getMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SSLChatService_getMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSLChatService_getMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_getMessage_result& obj);

};

typedef struct _SSLChatService_getMessage_presult__isset {
  _SSLChatService_getMessage_presult__isset() : success(false) {}
  bool success :1;
} _SSLChatService_getMessage_presult__isset;

class SSLChatService_getMessage_presult {
 public:


  virtual ~SSLChatService_getMessage_presult() throw();
  Message* success;

  _SSLChatService_getMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_getMessage_presult& obj);

};

typedef struct _SSLChatService_authorize_args__isset {
  _SSLChatService_authorize_args__isset() : name(false) {}
  bool name :1;
} _SSLChatService_authorize_args__isset;

class SSLChatService_authorize_args {
 public:

  SSLChatService_authorize_args(const SSLChatService_authorize_args&);
  SSLChatService_authorize_args& operator=(const SSLChatService_authorize_args&);
  SSLChatService_authorize_args() : name() {
  }

  virtual ~SSLChatService_authorize_args() throw();
  std::string name;

  _SSLChatService_authorize_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const SSLChatService_authorize_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const SSLChatService_authorize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSLChatService_authorize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_authorize_args& obj);

};


class SSLChatService_authorize_pargs {
 public:


  virtual ~SSLChatService_authorize_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_authorize_pargs& obj);

};

typedef struct _SSLChatService_authorize_result__isset {
  _SSLChatService_authorize_result__isset() : success(false) {}
  bool success :1;
} _SSLChatService_authorize_result__isset;

class SSLChatService_authorize_result {
 public:

  SSLChatService_authorize_result(const SSLChatService_authorize_result&);
  SSLChatService_authorize_result& operator=(const SSLChatService_authorize_result&);
  SSLChatService_authorize_result() : success(0) {
  }

  virtual ~SSLChatService_authorize_result() throw();
  bool success;

  _SSLChatService_authorize_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SSLChatService_authorize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SSLChatService_authorize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSLChatService_authorize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_authorize_result& obj);

};

typedef struct _SSLChatService_authorize_presult__isset {
  _SSLChatService_authorize_presult__isset() : success(false) {}
  bool success :1;
} _SSLChatService_authorize_presult__isset;

class SSLChatService_authorize_presult {
 public:


  virtual ~SSLChatService_authorize_presult() throw();
  bool* success;

  _SSLChatService_authorize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_authorize_presult& obj);

};

typedef struct _SSLChatService_send_args__isset {
  _SSLChatService_send_args__isset() : msg(false) {}
  bool msg :1;
} _SSLChatService_send_args__isset;

class SSLChatService_send_args {
 public:

  SSLChatService_send_args(const SSLChatService_send_args&);
  SSLChatService_send_args& operator=(const SSLChatService_send_args&);
  SSLChatService_send_args() {
  }

  virtual ~SSLChatService_send_args() throw();
  Message msg;

  _SSLChatService_send_args__isset __isset;

  void __set_msg(const Message& val);

  bool operator == (const SSLChatService_send_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const SSLChatService_send_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSLChatService_send_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_send_args& obj);

};


class SSLChatService_send_pargs {
 public:


  virtual ~SSLChatService_send_pargs() throw();
  const Message* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_send_pargs& obj);

};


class SSLChatService_send_result {
 public:

  SSLChatService_send_result(const SSLChatService_send_result&);
  SSLChatService_send_result& operator=(const SSLChatService_send_result&);
  SSLChatService_send_result() {
  }

  virtual ~SSLChatService_send_result() throw();

  bool operator == (const SSLChatService_send_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SSLChatService_send_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSLChatService_send_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_send_result& obj);

};


class SSLChatService_send_presult {
 public:


  virtual ~SSLChatService_send_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SSLChatService_send_presult& obj);

};

class SSLChatServiceClient : virtual public SSLChatServiceIf {
 public:
  SSLChatServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SSLChatServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sendGreating(const std::string& name);
  void send_sendGreating(const std::string& name);
  void recv_sendGreating();
  void getMessage(Message& _return, const std::string& name);
  void send_getMessage(const std::string& name);
  void recv_getMessage(Message& _return);
  bool authorize(const std::string& name);
  void send_authorize(const std::string& name);
  bool recv_authorize();
  void send(const Message& msg);
  void send_send(const Message& msg);
  void recv_send();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SSLChatServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SSLChatServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SSLChatServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sendGreating(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_authorize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_send(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SSLChatServiceProcessor(boost::shared_ptr<SSLChatServiceIf> iface) :
    iface_(iface) {
    processMap_["sendGreating"] = &SSLChatServiceProcessor::process_sendGreating;
    processMap_["getMessage"] = &SSLChatServiceProcessor::process_getMessage;
    processMap_["authorize"] = &SSLChatServiceProcessor::process_authorize;
    processMap_["send"] = &SSLChatServiceProcessor::process_send;
  }

  virtual ~SSLChatServiceProcessor() {}
};

class SSLChatServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SSLChatServiceProcessorFactory(const ::boost::shared_ptr< SSLChatServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SSLChatServiceIfFactory > handlerFactory_;
};

class SSLChatServiceMultiface : virtual public SSLChatServiceIf {
 public:
  SSLChatServiceMultiface(std::vector<boost::shared_ptr<SSLChatServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SSLChatServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SSLChatServiceIf> > ifaces_;
  SSLChatServiceMultiface() {}
  void add(boost::shared_ptr<SSLChatServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sendGreating(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendGreating(name);
    }
    ifaces_[i]->sendGreating(name);
  }

  void getMessage(Message& _return, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessage(_return, name);
    }
    ifaces_[i]->getMessage(_return, name);
    return;
  }

  bool authorize(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->authorize(name);
    }
    return ifaces_[i]->authorize(name);
  }

  void send(const Message& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send(msg);
    }
    ifaces_[i]->send(msg);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SSLChatServiceConcurrentClient : virtual public SSLChatServiceIf {
 public:
  SSLChatServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SSLChatServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sendGreating(const std::string& name);
  int32_t send_sendGreating(const std::string& name);
  void recv_sendGreating(const int32_t seqid);
  void getMessage(Message& _return, const std::string& name);
  int32_t send_getMessage(const std::string& name);
  void recv_getMessage(Message& _return, const int32_t seqid);
  bool authorize(const std::string& name);
  int32_t send_authorize(const std::string& name);
  bool recv_authorize(const int32_t seqid);
  void send(const Message& msg);
  int32_t send_send(const Message& msg);
  void recv_send(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
