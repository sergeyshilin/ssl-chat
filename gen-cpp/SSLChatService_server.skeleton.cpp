// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SSLChatService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::sslchat;

class SSLChatServiceHandler : virtual public SSLChatServiceIf {
 public:
  SSLChatServiceHandler() {
    // Your initialization goes here
  }

  /**
   * Send to all clients that user @name joins the chat.
   * Send user @name that he was successfully joined.
   * 
   * @param name
   */
  void sendGreating(const std::string& name) {
    // Your implementation goes here
    printf("sendGreating\n");
  }

  /**
   * Out message to client
   * 
   * @param name
   */
  void getMessage(Message& _return, const std::string& name) {
    // Your implementation goes here
    printf("getMessage\n");
  }

  /**
   * Check if name is in map
   * 
   * @param name
   */
  bool authorize(const std::string& name) {
    // Your implementation goes here
    printf("authorize\n");
  }

  /**
   * Send message to all clients without message.getClient()
   * 
   * @param msg
   */
  void send(const Message& msg) {
    // Your implementation goes here
    printf("send\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SSLChatServiceHandler> handler(new SSLChatServiceHandler());
  shared_ptr<TProcessor> processor(new SSLChatServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

