/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sslchat_TYPES_H
#define sslchat_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace sslchat {

class Message;

typedef struct _Message__isset {
  _Message__isset() : name(false), message(false) {}
  bool name :1;
  bool message :1;
} _Message__isset;

class Message {
 public:

  Message(const Message&);
  Message& operator=(const Message&);
  Message() : name(), message() {
  }

  virtual ~Message() throw();
  std::string name;
  std::string message;

  _Message__isset __isset;

  void __set_name(const std::string& val);

  void __set_message(const std::string& val);

  bool operator == (const Message & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Message& obj);

};

void swap(Message &a, Message &b);

} // namespace

#endif
